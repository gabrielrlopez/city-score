[{"C:\\Users\\dARCHANGELDESIGN\\Desktop\\Builds\\Quality Of Life\\quality-of-life\\src\\index.js":"1","C:\\Users\\dARCHANGELDESIGN\\Desktop\\Builds\\Quality Of Life\\quality-of-life\\src\\App.js":"2","C:\\Users\\dARCHANGELDESIGN\\Desktop\\Builds\\Quality Of Life\\quality-of-life\\src\\reportWebVitals.js":"3","C:\\Users\\dARCHANGELDESIGN\\Desktop\\Builds\\Quality Of Life\\quality-of-life\\src\\util.js":"4","C:\\Users\\dARCHANGELDESIGN\\Desktop\\Builds\\Quality Of Life\\quality-of-life\\src\\Components\\CityCard.js":"5","C:\\Users\\dARCHANGELDESIGN\\Desktop\\Builds\\Quality Of Life\\quality-of-life\\src\\Components\\LoadingSpinner.js":"6"},{"size":478,"mtime":1609990016796,"results":"7","hashOfConfig":"8"},{"size":4134,"mtime":1617388817182,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":20584,"mtime":1612481156325,"results":"11","hashOfConfig":"8"},{"size":8543,"mtime":1612498457428,"results":"12","hashOfConfig":"8"},{"size":268,"mtime":1610132739843,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"16r0ueb",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\dARCHANGELDESIGN\\Desktop\\Builds\\Quality Of Life\\quality-of-life\\src\\index.js",[],["29","30"],"C:\\Users\\dARCHANGELDESIGN\\Desktop\\Builds\\Quality Of Life\\quality-of-life\\src\\App.js",["31"],"import { useEffect, useState } from 'react';\nimport './App.css';\nimport { FormControl, Select, MenuItem } from '@material-ui/core';\nimport CityCard from './Components/CityCard';\nimport LoadingSpinner from './Components/LoadingSpinner';\nimport { getBasicCityInfoLinks, getCityImages, getCityScoreLink } from './util.js'\n\n\nfunction App() {\n  const [cities, setCities] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n  const [images, setImages] = useState([]);\n  const [basicCityInfoLinks, setBasicCityInfoLinks] = useState([]);\n  const [cityScoreLinks, setScoreLinks] = useState([]);\n  const [visibility, setVisibility] = useState(false);\n  const [firstContinent, setFirstContinent] = useState('');\n  const [geoName, setGeoName] = useState('');\n  const [triggered, setTriggered] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const indexOfLastCity = currentPage * postsPerPage;\n  const indexOfFirstCity = indexOfLastCity - postsPerPage;\n  const currentCities = cities.slice(indexOfFirstCity, indexOfLastCity);\n\n\n  const continents = [\n    { name: 'Africa', geonames: 'AF' },\n    { name: 'Asia', geonames: 'AS' },\n    { name: 'Europe', geonames: 'EU' },\n    { name: 'North America', geonames: 'NA' },\n    { name: 'Oceania', geonames: 'OC' },\n    { name: 'South America', geonames: 'SA' },\n  ]\n\n  const firstContinentSelected = (e) => {\n    setTriggered(true)\n    const firstContinent = e.target.value\n    setFirstContinent(firstContinent)\n  }\n\n  const onContinentChange = (e) => { \n    setLoading(true)\n    const geoName = e.target.value\n    setGeoName(geoName)\n    fetch(`https://api.teleport.org/api/continents/geonames%3A${geoName}/urban_areas/`)\n      .then(response => response.json())\n      .then(data => {\n        setLoading(false)\n        const cities = data._links['ua:items'].map(city => city.name)\n        setCities(cities)\n      })\n    setCurrentPage(1)\n    setVisibility(true)\n  }\n\n  // Set images for current cities\n  useEffect(() => {\n    const setCityImages = async () => {\n      const getImages = currentCities.map(city => getCityImages(city));\n      const images = await Promise.all(getImages);\n      setImages(images)\n    }\n    setCityImages()\n\n    //Get city population and country city belongs too links\n    const setPopAndCountry = async () => {\n      const getInfo = currentCities.map(city => getBasicCityInfoLinks(city));\n      const links = await Promise.all(getInfo);\n      setBasicCityInfoLinks(links)\n    }\n    setPopAndCountry()\n    // Get links to fetch city scores \n    const setCityScoreLinks = async () => {\n      const getLinks = currentCities.map(city => getCityScoreLink(city));\n      const links = await Promise.all(getLinks);\n      setScoreLinks(links)\n    }\n    setCityScoreLinks()\n  }, [currentCities.length, currentPage])\n\n  // Change page\n  const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n  console.log(basicCityInfoLinks);\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1 className=\"title\">Urban City Scores</h1>\n        <h2 className={!visibility ? \"select_a_continent\" : \"select_a_continent--hidden\"}>Select a continent to begin.</h2>\n        <FormControl>\n          <Select\n            onChange={onContinentChange}\n            onClick={!triggered ? firstContinentSelected : null}\n            variant=\"outlined\"\n          >\n            {continents.map(continent => <MenuItem value={continent.geonames}>{continent.name}</MenuItem>)}\n          </Select>\n        </FormControl>\n      </div>\n\n      <div className={!visibility ? \"card__container\" : \"card__container--hidden\"}></div>\n\n      {loading ? <LoadingSpinner className=\"spinner\" /> :\n        <CityCard\n          cities={currentCities}\n          images={images}\n          scoreLinks={cityScoreLinks}\n          infoLinks={basicCityInfoLinks}\n          postsPerPage={postsPerPage}\n          totalPosts={cities.length}\n          paginate={paginate}\n          currentPage={currentPage}\n          firstContinent={firstContinent}\n          geoName={geoName}\n        />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\dARCHANGELDESIGN\\Desktop\\Builds\\Quality Of Life\\quality-of-life\\src\\reportWebVitals.js",[],"C:\\Users\\dARCHANGELDESIGN\\Desktop\\Builds\\Quality Of Life\\quality-of-life\\src\\util.js",[],"C:\\Users\\dARCHANGELDESIGN\\Desktop\\Builds\\Quality Of Life\\quality-of-life\\src\\Components\\CityCard.js",["32","33","34","35","36","37"],"import React from 'react'\r\nimport { Card, CardActionArea, CardContent, Typography, CardMedia, Badge } from '@material-ui/core'\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport '../Styles/CityCards.css'\r\nimport { useEffect, useState } from 'react';\r\nimport { svgPaths } from '../util.js'\r\nimport { Pagination } from '@material-ui/lab';\r\nimport SupervisorAccountSharpIcon from '@material-ui/icons/SupervisorAccountSharp';\r\n\r\nfunction CityCard({ cities, images, scoreLinks, postsPerPage, totalPosts, paginate, currentPage, firstContinent, geoName, infoLinks }) {\r\n    const [clicked, setClick] = useState(false);\r\n    const [scores, setscores] = useState([]);\r\n    const [hiddenScores, setHiddenScores] = useState(false);\r\n    const [arrowVisibility, setArrowVisibility] = useState(false);\r\n    const [changedContinent, setChangedContinent] = useState(false);\r\n    const [cityCardHeader, setCityCardHeader] = useState(false);\r\n    const [scoreCardHeader, setScoreCardHeader] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [opacity, setOpacity] = useState(0);\r\n    const [cityPopulation, setCityPopulation] = useState([]);\r\n    const [cityCountry, setCityCountry] = useState([]);\r\n    let cityPopulationArr = [];\r\n    let cityCountryArr = [];\r\n    useEffect(() => {\r\n        const setPopAndCountry = (links) => {\r\n            links.map(link =>{\r\n                fetch(link)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    const {population} = data;\r\n                    const country = data._links['city:country'].name;\r\n                    cityPopulationArr.push(population);\r\n                    cityCountryArr.push(country);\r\n                    setCityPopulation([...cityPopulationArr]);\r\n                    setCityCountry([...cityCountryArr])\r\n                })\r\n            })\r\n        }\r\n        setPopAndCountry(infoLinks)\r\n    }, [cities])\r\n\r\n    const click = (e) => {\r\n        setLoading(true)\r\n        window.scrollTo(0, 0)\r\n        setClick(true)\r\n        const city = e.target.title\r\n        const link = scoreLinks.find(link => link.includes(city.replace(/[,.]/g, \"\").toLowerCase().split(' ').join('-')))\r\n        fetch(link)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setLoading(false)\r\n                const { categories } = data\r\n                console.log(categories);\r\n                setscores(categories)\r\n            })\r\n\r\n        // Display score progress\r\n        setTimeout(() => {\r\n            const opacity = 1\r\n            setOpacity(opacity)\r\n        }, 300);\r\n        setHiddenScores(false)\r\n        setArrowVisibility(true)\r\n        setChangedContinent(false)\r\n        setCityCardHeader(false)\r\n    }\r\n\r\n    //pagination\r\n    let pageNumbers = Math.ceil(totalPosts / postsPerPage);\r\n\r\n    const handleChange = (event, pageNumber) => {\r\n        paginate(pageNumber)\r\n        window.scrollTo(0, 0)\r\n    };\r\n\r\n    //hide score cards on back button click \r\n    const hide = () => {\r\n        setHiddenScores(true)\r\n        setClick(false)\r\n        setCityCardHeader(true)\r\n        setScoreCardHeader(false)\r\n        window.scrollTo(0, 0)\r\n    }\r\n\r\n    //Hide score cards \r\n    useEffect(() => {\r\n        const hideScores = (first, second) => {\r\n            if (first !== second) setChangedContinent(true)\r\n            setClick(false)\r\n        }\r\n        hideScores(firstContinent, geoName)\r\n    }, [cities])\r\n\r\n    // display city card header \r\n    useEffect(() => {\r\n        if (firstContinent) setCityCardHeader(true)\r\n    }, [geoName])\r\n\r\n    // display score card header \r\n    useEffect(() => {\r\n        if (clicked) setScoreCardHeader(true)\r\n        if (cityCardHeader === true) setScoreCardHeader(false)\r\n    }, [clicked])\r\nconsole.log(cityPopulation);\r\n\r\n    return (\r\n        <>\r\n            <h2 className={cityCardHeader ? \"select_a_city\" : \"select_a_city--hidden\"}>Select a city to view its score out of ten on several different categories.</h2>\r\n            {loading ? <LoadingSpinner /> : null}\r\n            {/**City cards*/}\r\n            <div className={clicked ? \"city__cards--hidden\" : \"city__cards\"}>\r\n                {cities.map((city, i) =>\r\n                    <Card\r\n                        className=\"city__card\"\r\n                        onClick={click}\r\n                    >\r\n                        <CardActionArea>\r\n                            <CardMedia\r\n                                className=\"city__image\"\r\n                                image={images[i]}\r\n                                title={city}\r\n                            />\r\n                            <CardContent style={{display:\"flex\", justifyContent: \"space-between\"}}>\r\n                                    <Typography\r\n                                    >\r\n                                        {city}\r\n                                    </Typography>\r\n                                    <Badge \r\n                                    badgeContent={cityPopulation[i]}\r\n                                    max={100000000}\r\n                                    // style={{color: \"orange\"}}\r\n                                    color={'error'}\r\n                                    >\r\n                                        <Typography\r\n                                        color=\"textSecondary\"\r\n                                        >Population\r\n                                        </Typography>\r\n                                        {/* <SupervisorAccountSharpIcon /> */}\r\n                                    </Badge>\r\n                                    <Typography \r\n                                    color=\"textSecondary\"\r\n                                    variant=\"body1\"\r\n                                    >\r\n                                        {cityCountry[i]}\r\n                                    </Typography>\r\n                            </CardContent>\r\n                            \r\n                        </CardActionArea>\r\n                    </Card>)}\r\n            </div>\r\n\r\n            {/**Pagination */}\r\n            <div className={clicked ? \"pagination--hidden\" : \"pagination\"}>\r\n                <Pagination count={pageNumbers} variant=\"outlined\" shape=\"rounded\" onChange={handleChange} page={currentPage} hidePrevButton hideNextButton />\r\n            </div>\r\n\r\n            <h2 className={scoreCardHeader ? \"rainbow\" : \"rainbow--hidden\"}>Here's a rainbow in case you didn't see one today :)</h2>\r\n\r\n            {/**Score cards */}\r\n            <div className={hiddenScores || changedContinent ? \"score__cards--hidden\" : 'score__cards'}>\r\n                {/* <h1>City scores out of ten</h1> */}\r\n                {scores.map((score) =>\r\n                    < Card\r\n                        className={\"score__card\"}\r\n                    >\r\n                        <CardContent\r\n                            className=\"content\"\r\n                            style={{ backgroundColor: score.color }}\r\n                        >\r\n                            <Typography\r\n                                variant=\"h4\"\r\n                                color=\"textSecondary\"\r\n                            >\r\n                                {score.name}\r\n                            </Typography>\r\n                            <div className=\"icon\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"60\" height=\"60\" viewBox=\"0 0 24 24\"><path d={svgPaths[score.name]} /></svg>\r\n                            </div>\r\n\r\n                            <div className=\"progress\">\r\n                                <div className=\"progress__done\"\r\n                                    style={{\r\n                                        width: Math.round(score.score_out_of_10) + '0%',\r\n                                        opacity: opacity\r\n                                    }}\r\n                                >\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"number\">\r\n                                <h2>{Math.round(score.score_out_of_10)}<span>/</span>10</h2>\r\n                            </div>\r\n                        </CardContent>\r\n                    </Card>)}\r\n                <div className={arrowVisibility ? \"back__arrow\" : \"back__arrow--hidden\"} onClick={hide}>\r\n                    <ion-icon name=\"arrow-back-circle-outline\"></ion-icon>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CityCard\r\n","C:\\Users\\dARCHANGELDESIGN\\Desktop\\Builds\\Quality Of Life\\quality-of-life\\src\\Components\\LoadingSpinner.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":80,"column":6,"nodeType":"44","endLine":80,"endColumn":41,"suggestions":"45"},{"ruleId":"46","severity":1,"message":"47","line":8,"column":8,"nodeType":"48","messageId":"49","endLine":8,"endColumn":34},{"ruleId":"50","severity":1,"message":"51","line":26,"column":28,"nodeType":"52","messageId":"53","endLine":26,"endColumn":30},{"ruleId":"42","severity":1,"message":"54","line":40,"column":8,"nodeType":"44","endLine":40,"endColumn":16,"suggestions":"55"},{"ruleId":"42","severity":1,"message":"56","line":92,"column":8,"nodeType":"44","endLine":92,"endColumn":16,"suggestions":"57"},{"ruleId":"42","severity":1,"message":"58","line":97,"column":8,"nodeType":"44","endLine":97,"endColumn":17,"suggestions":"59"},{"ruleId":"42","severity":1,"message":"60","line":103,"column":8,"nodeType":"44","endLine":103,"endColumn":17,"suggestions":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentCities'. Either include it or remove the dependency array.","ArrayExpression",["64"],"no-unused-vars","'SupervisorAccountSharpIcon' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'cityCountryArr', 'cityPopulationArr', and 'infoLinks'. Either include them or remove the dependency array.",["65"],"React Hook useEffect has missing dependencies: 'firstContinent' and 'geoName'. Either include them or remove the dependency array.",["66"],"React Hook useEffect has a missing dependency: 'firstContinent'. Either include it or remove the dependency array.",["67"],"React Hook useEffect has a missing dependency: 'cityCardHeader'. Either include it or remove the dependency array.",["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [currentCities, currentCities.length, currentPage]",{"range":"79","text":"80"},"Update the dependencies array to be: [cities, cityCountryArr, cityPopulationArr, infoLinks]",{"range":"81","text":"82"},"Update the dependencies array to be: [cities, firstContinent, geoName]",{"range":"83","text":"84"},"Update the dependencies array to be: [firstContinent, geoName]",{"range":"85","text":"86"},"Update the dependencies array to be: [cityCardHeader, clicked]",{"range":"87","text":"88"},[2807,2842],"[currentCities, currentCities.length, currentPage]",[1937,1945],"[cities, cityCountryArr, cityPopulationArr, infoLinks]",[3475,3483],"[cities, firstContinent, geoName]",[3605,3614],"[firstContinent, geoName]",[3795,3804],"[cityCardHeader, clicked]"]